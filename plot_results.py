# =============================================================================
# SCRIPT 05: VISUALIZATION OF FORECAST RESULTS
#
# This script loads the VaR forecasts generated by the simulation script
# and creates a high-quality time series plot to compare the performance
# of the different copula models, with stress periods highlighted.
# =============================================================================

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

def plot_forecast_comparison():
    """
    Loads forecast data and generates a comparison plot for VaR estimates.
    """
    # --- 1. Load the Forecast Data ---
    try:
        forecast_file = 'forecast_results.csv'
        df = pd.read_csv(forecast_file, index_col='Date', parse_dates=True)
    except FileNotFoundError:
        print(f"Error: The file '{forecast_file}' was not found.")
        print("Please make sure you have successfully run '03_copula_simulation.py' first.")
        return

    # --- 2. Create the Plot ---
    print("Generating plot...")
    
    # Use a professional plot style
    plt.style.use('seaborn-v0_8-whitegrid')
    fig, ax = plt.subplots(figsize=(16, 8))

    # Identify all VaR columns to plot
    var_columns = [col for col in df.columns if 'VaR' in col]

    # Plot each VaR series
    # We multiply by -100 to show the VaR as a positive percentage loss, which is more intuitive
    for col in var_columns:
        model_name = col.replace('_VaR_99', '')
        ax.plot(-df[col] * 100, label=model_name, alpha=0.8, linewidth=1.5)

    # --- 3. Format the Plot for Clarity and Professionalism ---
    
    # Add titles and labels
    ax.set_title('Comparison of Daily 99% VaR Forecasts from Different Copula Models', fontsize=18, fontweight='bold')
    ax.set_xlabel('Date', fontsize=12)
    ax.set_ylabel('Value-at-Risk (% Loss)', fontsize=12)
    
    # Add a legend
    ax.legend(title='Copula Model', fontsize=11)
    
    # Add grid for better readability
    ax.grid(True, which='both', linestyle='--', linewidth=0.5)

    # Highlight the stress-test periods using shaded regions
    ax.axvspan('2020-03-01', '2020-04-30', color='red', alpha=0.15, label='COVID-19 Shock')
    ax.axvspan('2022-02-24', '2022-06-30', color='orange', alpha=0.15, label='Geopolitical Shock')
    
    # Improve the formatting of the date axis
    ax.xaxis.set_major_locator(mdates.YearLocator())
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    plt.xticks(rotation=45, ha='right')
    
    # Ensure all elements fit nicely
    plt.tight_layout()
    
    # Save the plot to a file
    plot_filename = 'VaR_Forecasts_Comparison.png'
    plt.savefig(plot_filename, dpi=300) # dpi=300 ensures high resolution
    print(f"Plot saved successfully as '{plot_filename}'.")
    
    # Display the plot
    plt.show()

if __name__ == '__main__':
    plot_forecast_comparison()